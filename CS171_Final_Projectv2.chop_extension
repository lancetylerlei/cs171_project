Require Import Arith.

Fixpoint gb(n m : nat): bool :=
match n, m with
|O,O => false
|O,S _ => false
|S _ , O => true
|S n', S m' => (gb n' m')
end.


Inductive player_turn : Type :=
|p1
|p2.

Inductive who_is_winning : Type :=
|p1WinningPos_and_p2LosingPos
|p2WinningPos_and_p1LosingPos
|p1Winner
|p2Winner
.



Definition determine_game_state
(sticks: nat)  (possible_moves_from_1_to: nat)(current_player: player_turn) : who_is_winning:= 
match sticks with
| O => match current_player with
       |p1 => p1Winner
       |p2 => p2Winner
       end
|S _ => if (sticks <=? possible_moves_from_1_to) then 
              match current_player with
              |p1 => p1WinningPos_and_p2LosingPos
              |p2 => p2WinningPos_and_p1LosingPos 
              end

              else
              match (sticks mod (possible_moves_from_1_to + 1)) with 
              |O => match current_player with
                    |p1 => p2WinningPos_and_p1LosingPos
                    |p2 => p1WinningPos_and_p2LosingPos
                    end
              |S n' => match current_player with
                        |p1 => p1WinningPos_and_p2LosingPos
                        |p2 => p2WinningPos_and_p1LosingPos
                        end
              end
end.


Theorem current_player_winning_if_sticks_less_than_max_of_moves: 
forall s m : nat, forall current_player: player_turn,
(s <=? m) = true -> current_player = p1 -> 
(determine_game_state s m current_player) = p1WinningPos_and_p2LosingPos \/ 
(determine_game_state s m current_player) = p1Winner.
Proof.
intros. unfold determine_game_state. rewrite H. rewrite H0. destruct s.
- right. reflexivity.
- left. reflexivity.
Qed.

Theorem current_player_loses_if_sticks_is_multiple_of_max_move_plus_1:
forall s m : nat, forall current_player: player_turn,
(s <=? m) = false /\ (s mod (m+1)) = 0 /\ current_player = p1 ->
(determine_game_state s m current_player) = p2WinningPos_and_p1LosingPos.
Proof.
intros. destruct H. destruct H0. unfold determine_game_state.
rewrite H. rewrite H0. rewrite H1. destruct s.
- discriminate H.
- reflexivity.
Qed.

Theorem current_player_wins_if_sticks_is_not_multiple_of_max_move_plus_1:
forall s m n: nat, forall current_player: player_turn,
(s <=? m) = false /\ (s mod (m+1)) = n /\ (gb n 0) = true  /\ current_player = p1  ->
(determine_game_state s m current_player) = p1WinningPos_and_p2LosingPos.
Proof.
intros. destruct H. destruct H0. destruct H1. unfold determine_game_state.
rewrite H. rewrite H0. rewrite H2. induction s.
- discriminate H.
- induction n.
+ discriminate H1.
+ reflexivity.
Qed.



